############################################################
# The user may set an environment variable with the name AMBIT_CONFIG_OVERRIDE_VAR
# The environment variable shall point to an absolute filesystem path to a directory
# The directory may contain ambit2.pref, config.prop and/or ambit2.assay.properties file
# Settings in these files will take precedence over the same settings from the application WEB-INF/classes/ambit2/rest/config directory
# 
AMBIT_CONFIG_OVERRIDE_VAR=${AMBIT_CONFIG_OVERRIDE_VAR}
############################################################
############################################################
#OpenTox Authentication and Authorization configuration for AMBIT ${project.version} web services
#For AMBIT ${project.version} web services configuration please see ambit2.pref 
#For fine tuning logging please see logging.prop file
#If true, Ambit REST services are protected by OpenTox AA 
#If false, Ambit REST services are not protected by OpenSSO,for alternative AA see below
aa.enabled=${aa.enabled}
#OpenTox OpenSSO server
aa.opensso=${aa.opensso}
#OpenTox policy server
aa.policy=${aa.policy}
#Test AA user, used for running tests only
aa.user=${aa.user}
aa.pass=${aa.pass}
############################################################
#Used to enable simple local HTTP Basic authz, in case OpenSSO AA is disabled
#All resources are publicly readable, but user name and password are required for
#importing data or running calculations (HTTP POST, PUT , DELETE are protected  
#via HTTP BASIC scheme). The user and password are defined in the
#aa.local.admin.name and aa.local.admin.pass properties.
#
aa.local.enabled=${aa.local.enabled}
aa.local.admin.name=${aa.local.admin.name}
aa.local.admin.pass=${aa.local.admin.pass}
############################################################
guard.enabled=${guard.enabled}
guard.list=${guard.list}
warmup.enabled=${warmup.enabled}
############################################################
#Cross-origin resource sharing (CORS) settings 
allowed.origins=${allowed.origins}
############################################################
# AMBIT local users database
# IMPORTANT: ambit_users database should exist at ambit.db.host
#
aa.db.enabled=${aa.db.enabled}
#MySQL Database configuration
Host=${ambit.db.host}
Scheme=jdbc\:mysql
Port=3306
Database=${users.db}
User=${ambit.db.user.test}
Password=${ambit.db.user.test.password}
#Secret (used to encrypt cookies) Change it. Should be 16 characters!
secret=${ambit.secret}
#Session timeout in milliseconds. Default is 45 min = 2700000 ms
sessiontimeout=${ambit.sessiontimeout}
auth_cookie_path=${auth_cookie_path}
############################################################
#e-mail setup. Used for registration notifications
#The eMail server is used to send confirmation emails to newly registered 
#users,as well as confirmations for password resets.
#Please define a valid SMTP server, the values below are just examples.
mail.smtp.ssl.protocols=${notification.mail.smtp.ssl.protocols}
mail.smtp.ssl.ciphersuites=${notification.mail.smtp.ssl.ciphersuites}
mail.smtp.starttls.enable=${notification.mail.smtp.starttls.enable}
mail.smtp.auth=${notification.mail.smtp.auth}
mail.transport.protocol=${notification.mail.transport.protocol}
mail.smtp.port=${notification.mail.smtp.port}
mail.smtp.socketFactory.fallback=${notification.mail.smtp.socketFactory.fallback}
mail.host=${notification.mail.host}
mail.user=${notification.mail.user}
mail.password=${notification.mail.password}
notification.admin.email=${notification.admin.email}
############################################################
#With email verification disabled everybody could register a new user; however
#the user status have to be changed to 'confirmed' by an admin through the 
#user management page. 
enableEmailVerification=${enableEmailVerification}
